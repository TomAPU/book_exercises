p58
2.16:

右移位分逻辑移位和算术移位，
但C语言标准中没有规定，一般编译器的实现是：signed int : arithmetical shift
   unsigned int: logical shift
JAVA中， >> 是arithmetical, >>>是 logical

x=0xC3 = 1100 0011; x<<3 = 0001 1000= 0x18; x>>2(logical)=0011 0000=0x30; x>>2(arithmetic)=1111 0000=0xF0
x=0x75 = 0111 0101; x<<3 = 1010 1000= 0xA8; x>>2(logical)=0001 1101=0x1D; x>>2(arithmetic)=0001 1101=0x1D
x=0x87 = 1000 0111; x<<3 = 0011 1000= 0x38; x>>2(logical)=0010 0001=0x21; x>>2(arithmetic)=1110 0001=0xE1
x=0x66 = 0110 0110; x<<3 = 0011 0000= 0x30; x>>2(logical)=0001 1001=0x19; x>>2(arithmetic)=0001 1001=0x19

p66
2.17:
    0xE = [1110]; B2U: pow(2,3) + pow(2,2) + pow(2,1) = 8+4+2=14; B2T: -pow(2,3)+pow(2,2)+pow(2,1)=-8+4+2=-2
    0x0 = [0000]; B2U: =0; B2T: =0
    0x5 = [0101]; B2U: pow(2,2) + pow(2,0) = 4+1=5; B2T: pow(2,2) + pow(2,0)=5
    0x8 = [1000]; B2U: pow(2,3) = 8; B2T: -pow(2,3)=-8
    0xD = [1101]; B2U: pow(2,3) + pow(2,2) + pow(2,0) = 8+4+1=13; B2T: -pow(2,3)+pow(2,2)+pow(2,0)=-8+4+1=-3
    0xF = [1111]; B2U: pow(2,3) + pow(2,2) + pow(2,1) +pow(2,0) = 8+4+2+1=15; B2T: -pow(2,3)+pow(2,2)+pow(2,1)+pow(2,0)=-8+4+2+1=-1


p69
2.18:

w位二进制转无符号数 B2U时，最小值U<min>=0, 最大值U<max>=pow(2, w) -1
w位二进制转二进制补码表示的有符号数时 B2T，最小值T<min>=-pow(2, w-1), 最大值T<max>=pow(2, w-1)-1
U<max> = 2T<max> + 1

二进制补码的属性：当x为非负数时，-x=pow(2,w)-x，即-x是x的补码，即将x取反加1就等到-x。

C99的<stdint.h>中定义的各种固定倍数的整型，如unit16_t, int32_t, 在printf是要用相应的宏表示输出类型：
如当x为int32_t, y为unit64_t是。
printf( "x=%" PRId32 ", y=%" PRIu64 "\n", x, y ), 再由C语言的字符串自动拼接来完成。

该题？？


p72
2.19:

无符号整数U的范围：[0, U<max>]
有符号数数（补码表示）T的范围：[T<min>, T<max>]

相同位数的整数相互转变时，低层的bit pattern不变。

有符号数转到无符号数：
T2U = B2U(T2B), [T<min>, T<max>] --> [0, U<max>]
无符号数转到有符号数：
U2T = B2T(U2B), [0, U<max>] --> [T<min>, T<max>]

对于w=16时:
    T=-12345, T2U(-12345)=53191
    U=53191, U2T(53191)=-12345

对于w=32时：
    T=-1, T2U(-1)=4294967295; Umax
    U=4294967295, U2T(4294967295)=-1

故：
当w=4时，
x=-8=1000, T2U(x)=8
x=-3=-8+4+1=1101, T2U(x)=13
x=-2=-8+4+2=1110, T2U(x)=14
x=-1=-8+4+2+1=1111,T2U(x)=15
x=0=0000,T2U(x)=0
x=5=0101,T2U(x)=5


p73
2.20:
T2U的计算公式，即公式2.5，当x<0时，T2U(x) = x+pow(2,w), 当x>=0时，T2U(x)=x
即，非负数转换后不变，负数变成了较大部分的整数。
故2.19题中，
x=-8, T2U(x)=-8+16=8
x=-3, T2U(x)=-3+16=13
x=-2, T2U(x)=-2+16=14
x=-1, T2U(x)=-1+16=15
x=0,T2U(x)=0
x=5,T2U(x)=5

p76
2.21:

Expression                   Type      Evaluation
-2147483647-1==2147483648U   unsigned  1； 左边转成U=-2147483648+Pow(2,32),等于右边
-2147483647-1 < 2147483647   signed    1;
-2147483647-1U < 2147483647  unsigned  0; 左边-2147483647转成U=2147483649, 故左边为2147483648
-2147483647-1 < -2147483647  signed    1; 
-2147483647-1U < -2147483647 unsigned  1; 左边-2147483647转成U=2147483649, 故左边为2147483648, 右边转成U=2147483649
see test code in 2.21_signed_unsigned_casting_and_relational_operations.c


p79
2.22:

二进制补码表示的整数，符号扩展后的值不变。
mZ因此:
    A. 1011 = -8+3+1=-5
    B. 11011 = -16+8+3+1=-5
    C. 111011 = -32+16+8+3+1=-5


p80
2.23:

int fun1 (unsigned word) {
    return (int) ((word<< 24) >> 24);
}

int fun2(unsigned word) {
    return ((int) word << 24) >> 24;
}

假设在32位机上, 有符号数算术右移，无称号数逻辑右移

则：

w           fun1(w)     fun2(w)
0x00000076  0x00000076  0x00000076
0x87654321  0x00000021  0x00000021
0x000000C9  0x000000C9  0xFFFFFFC9
0xEDCBA987  0x00000087  0xFFFFFF87

B. 因此fun1实现将最低字节值，而fun2实现取最低字节值，然后符号扩展。


p82
2.24:

无符号数：
w位无符号数截短到k位后，结果= 原值 mod pow(2, k)， 相当于k位后面的位都置为0

有符号数：
w位截短到k位后，计算方法：将原值的比特串看着无符号数， 值 mod pow(2,k), 即相当于
将无符号数截短至k位，再将该值解释成二进制补码的有符号数（这一步相当于解析最高有效位)

因此： 对于将4位值截短到3位的计算，如下：

       Hex                 Unsigned           Two's complement
Original  Truncated   Original Truncated    Original  Truncated
0(0000)   0           0        0            0         0
2(0010)   2           2        2            2         2
9(1001)   1           9        1            -7        1
B(1011)   3           11       3            -5        3
F(1111)   7           15       7            -1        -1

p83
2.25:

Consider the following code that attempts to sum the elements of an array a, where
the number of elements is given by parameter length:
/* WARNING: This is buggy code */
float sum_elements(float a[], unsigned length) {
    int i;
    float result = O;

    for (i = O; i <= length-1; i++)
        result+= a[i];
    return result;
}

因此 length是无符号整数，因此 i<=length-1中，左右边都转成无符号号，即右边-1会转成无符号数pow(2,w)-1,当length为0时，会有很多次循环。

修正方法是将length参数声明为int型。


p83
2.26:

由于 size_t strlen(const char *s);
中 size_t typedef为unsigned。

/* Determine whether string s is longer than string t */
/* WARNING: This function is buggy  */

int strlonger(char *s, char *t)
{
    return strlen(s) - strlen(t) > O;
}

语句中strlen(s) - strlen(t) > O的左右边都会转为无符号数，
当s的长度小于t时，本来相关是负数的，转成无符号数后就变成正数了。

修改：
    return strlen(s)>strlen(t);
