p95
2.33:
二进制补码整型的负数：
1. 当x=Tmin时，-x=Tmin, 因为Tmin+Tmin=pow(2,w)=0
2. 当Tmin<x<=Tmax时， 为正常的负数操作

因此，对于w=4的二进制补码整型：

   x                 -x
Hex      Decimal  Decimal  Hex
0(0000)  0        0        0(0000)
5(0101)  5        -5       B(1011)
8(1000)  -8       -8       8(1000)
D(1101)  -3       3        3(0010)
F(1111)  -1       1        1(0001)

总结：
    对于无符号数0<=x<=pow(2,w)-1
    1. x=0时，-x=x
    2. x>0时, -x=pow(2,w)-x

    对于有符号数-pow(2,w-1)<=x<=pow(2,w-1)-1
    1. x=Tmin=-pow(2,w-1)时，-x=x
    2. 其它值时, -x为正常负数操作

    对于补码表示的整数，在二进制层面上说，有2种方法：
    一、负数和取反加1的值是一样的：-x=~x+1
    因此，碰到x=0xfffffffa时， -x=~x+1=[0101]+1=6, x=-6

    二、找到二进制表示的最右边的值为1的位k, 即[x<w-1>, ..., x<k+1>, 1, 0, 0, 0], 
    要求x的负数，将k位左边的位全部取反，k位保持不变，即 -x=[-x<w-1>, ..., -x<k+1>, 1, 0,0,0]
    例： x=[1100]=-4, -x=[0100]=4
    x=[0101]=5, -x=[1011]=-5
    x=[0111]=7, -x=[1001]=-7


p98
2.34:
w位的无符号整数相乘结果需2w位表示，截短后的结果x*y = (x*y) mod pow(2,w)
类似的，w位的有符号整数相乘结果也需2w位表示。
计算机在计算整数相乘时， 不管是有符号数还是无符号数， 在二进制层面上，
相乘后结果截短后都是相同的。
故在计算有符号整数相乘时，可以先用相应无符号整数相乘，再找结果解析为有符号数， 即 x*y = U2T(x*y mod pow(2,w))

因此，对于w=3时，题目中的各值为：

Mode                 x           y        x*y         Truncated x*y
---------------    --------   --------  ----------    -------------
Unsigned           4  [100]   5  [101]  20  [10100]     4  [100]
Two's complemnt    -4 [100]   -3 [101]  -12 [10100]     -4 [100]
Unsigned           2  [010]   7  [111]  14  [1110]      6  [110]
Two's complemnt    2  [010]   -1 [111]  -2  [1110]      -2 [110]
Unsigned           6  [110]   6  [110]  36  [100100]    4  [100]
Two's complemnt    -2 [110]   -2 [110]  -28 [100100]    -4 [100]


